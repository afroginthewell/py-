ef use_logging(func):

    def wrapper(*args, **kwargs):                      //若foo（）有参数
        logging.warn("%s is running" % func.__name__)
        return func(*args, **kwargs)
    return wrapper

@use_logging
def foo():
    print("i am foo")

foo()





import functools
def log(text):
    def decorator(func):
        @functools.wraps(func)
        def wrapper(*args, **kw):
            print('%s %s():' % (text, func.__name__))
            return func(*args, **kw)
        return wrapper
    return decorator








偏函数
    int2 = functools.partial(int, base=2)  
    也可int2('1000000', base=10)
    可接收**kw，相当于
    kw = { 'base': 2 }
    int('10010', **kw)
    
    max2 = functools.partial(max, 10)
    接收*args
    会把10作为*args的一部分自动加到左边
    args = (10, 5, 6, 7)
    max(*args)
    
    
    
    
    
    
    
    
    
    
